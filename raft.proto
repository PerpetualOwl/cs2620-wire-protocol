syntax = "proto3";

package raft;

service RaftService {
  // Leader election RPCs
  rpc RequestVote (RequestVoteRequest) returns (RequestVoteResponse) {}
  rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesResponse) {}
  
  // Log replication RPCs
  rpc ReplicateLog (LogEntry) returns (ReplicationResponse) {}
  
  // State transfer
  rpc RequestState (StateRequest) returns (stream StateChunk) {}
}

message RequestVoteRequest {
  int32 term = 1;
  string candidate_id = 2;
  int32 last_log_index = 3;
  int32 last_log_term = 4;
}

message RequestVoteResponse {
  int32 term = 1;
  bool vote_granted = 2;
}

message AppendEntriesRequest {
  int32 term = 1;
  string leader_id = 2;
  int32 prev_log_index = 3;
  int32 prev_log_term = 4;
  repeated LogEntry entries = 5;
  int32 leader_commit = 6;
}

message AppendEntriesResponse {
  int32 term = 1;
  bool success = 2;
}

message LogEntry {
  int32 term = 1;
  int32 index = 2;
  bytes data = 3;
  string operation_type = 4;
}

message ReplicationResponse {
  bool success = 1;
  string error_message = 2;
}

message StateRequest {
  string server_id = 1;
}

message StateChunk {
  bytes data = 1;
  bool is_last = 2;
} 